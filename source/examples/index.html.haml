---
layout: application
---

- content_for :head do
  = javascript_include_tag 'examples'

%h2
  Example #{example}:
  - case example
    - when 1
      Basic stage and scene interaction
    - when 2
      Naming stages and scenes
    - when 3
      Toggling classes and IDs instead of visibility
    - when 4
      Sharing scenes, sharing stages, nesting, and special keywords

- case example
  - when 1
    :markdown
      This is Stagehand at its simplest. You don't need to name your stages and scenes: Stagehand detects sibling elements without a stage name as being part of the same stage.
  - when 2
    :markdown
      You can name scenes and stages if you like. Unnamed scenes/stages will be named (uncreatively) by Stagehand.
  - when 3
    :markdown
      Oftentimes you'll want to toggle a class or ID rather than just visibility of an element. Piece of cake:
  - when 4
    :markdown
      You can assign multiple stages and scenes to actors (separated by commas), and you can nest scenes and stages to your heart's content; hey, whether the resulting states make any sense is up to you.

      There are three special keywords in Stagehand: `toggle`, `all`, and `!`.

      Sometimes, instead of switching between actors, you might want to toggle a single actor (or group of actors). If an actor has a scene of `toggle`, its stage is given two scenes, 'toggle on' and 'toggle off'.

      If an actor has a scene of `all`, it's visible for all scenes of a stage, and that stage is also given a scene option of 'none' in the toolbar (which toggles every associated actor off),

      If you need to have an actor show for everything _except_ a particular scene (or scenes), add a scene of `all` and follow it up with a scene name prepended with `!`, e.g. `!pants`.

%h3
  Example output

- @code = partial "/examples/example_#{example}"

.example_output= @code

%p (Click on the Stagehand icon in the upper left to toggle the toolbar)

%h3 Source code

- code('html') do @code.force_encoding(Encoding::UTF_8) end
